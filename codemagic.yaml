workflows:
  ios_sim_to_appetize:
    name: iOS Simulator → Appetize
    max_build_duration: 60
    environment:
      groups:
        - appetize
      vars:
        # Vars are kept for clarity, but we’ll use explicit paths in scripts to avoid UI resets
        APP_NAME: "TaskSchedulerApp"
        SCHEME_NAME: "TaskSchedulerApp"
        WORKSPACE_OR_PROJECT: "ios-app/TaskSchedulerApp.xcodeproj"
      xcode: 16.1
      cocoapods: default

    scripts:
      - name: Show Xcode version
        script: xcodebuild -version

      - name: Install XcodeGen (resilient, no auto-update)
        script: |
          set -euo pipefail
          if command -v xcodegen >/dev/null 2>&1; then
            echo "XcodeGen already installed:"
            xcodegen --version || true
          else
            # Prevent brew from failing due to large/old installs
            export HOMEBREW_NO_AUTO_UPDATE=1
            export HOMEBREW_NO_INSTALL_CLEANUP=1
            brew install xcodegen || brew upgrade xcodegen || true
            xcodegen --version || true
          fi

          
      - name: Generate Xcode project with XcodeGen
        script: |
          set -euo pipefail
          # Normalize common misnaming
          [ -f ios-app/project.yaml ] && mv ios-app/project.yaml ios-app/project.yml || true

          echo "Before xcodegen, ios-app contains:"
          ls -la ios-app

          # Generate from inside ios-app (so output lands in ios-app/)
          pushd ios-app >/dev/null
          xcodegen generate --spec project.yml
          echo "After xcodegen, ios-app contains:"
          ls -la
          popd >/dev/null


      - name: Build .app for iOS Simulator (unsigned)
        script: |
          set -euo pipefail
          DERIVED="ios-app/build_dir"

          xcodebuild \
            -project "ios-app/TaskSchedulerApp.xcodeproj" \
            -scheme "TaskSchedulerApp" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
            -derivedDataPath "$DERIVED" \
            -destination-timeout 120 \
            build | xcpretty

          APP_PATH="$(/usr/bin/find "$DERIVED/Build/Products/Debug-iphonesimulator" -maxdepth 1 -type d -name "TaskSchedulerApp.app" -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "❌ Could not find TaskSchedulerApp.app in Debug-iphonesimulator."
            echo "Products dir:"; ls -la "$DERIVED/Build/Products" || true
            exit 1
          fi

          cd "$(dirname "$APP_PATH")"
          zip -qry "TaskSchedulerApp.zip" "TaskSchedulerApp.app"
          echo "ZIPPED_APP=$(pwd)/TaskSchedulerApp.zip" >> $CM_ENV

      - name: Show CFBundleIdentifier inside built .app
        script: |
          set -euo pipefail
          APP_DIR="$(dirname "$APP_PATH")"
          /usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$APP_DIR/TaskSchedulerApp.app/Info.plist" || true
          
      - name: Upload to Appetize (create new app)
        script: |
          set -euo pipefail
          if [ -z "${APPETIZE_API_KEY:-}" ]; then
            echo "❌ APPETIZE_API_KEY is not set"
            exit 1
          fi

          RESP=$(curl -sS -X POST "https://api.appetize.io/v1/apps" \
            -H "X-API-KEY: $APPETIZE_API_KEY" \
            -F "file=@${ZIPPED_APP}" \
            -F "platform=ios")

          echo "Appetize response: $RESP"

          PUBLIC_KEY=$(echo "$RESP" | jq -r '.publicKey // empty')
          if [ -z "$PUBLIC_KEY" ]; then
            echo "❌ Failed to get publicKey from Appetize response."
            exit 1
          fi

          # Let Appetize pick a compatible device/OS
          LAUNCH_URL="https://appetize.io/app/${PUBLIC_KEY}?scale=75"
          echo "LAUNCH_URL=${LAUNCH_URL}" >> $CM_ENV
          echo "✅ Open in browser: ${LAUNCH_URL}"

    artifacts:
      - ios-app/build_dir/Build/Products/Debug-iphonesimulator/*.app
      - ios-app/build_dir/Build/Products/Debug-iphonesimulator/*.zip
